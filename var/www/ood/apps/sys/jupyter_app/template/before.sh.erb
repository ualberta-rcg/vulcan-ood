#!/bin/bash

# Export module if available
[[ $(type -t module) == "function" ]] && export -f module

# Get user and UID
USER_NAME="${USER:-$(whoami)}"
USER_UID="$(id -u "$USER_NAME" 2>/dev/null || getent passwd "$USER_NAME" | cut -d: -f3)"
echo "[before.sh.erb] User: $USER_NAME (UID: $USER_UID)"

# Setup /run/user
sudo /usr/local/bin/create-ice.sh "$USER_UID"

# Find available port to run server on
port=$(find_port ${host})

# Generate SHA1 encrypted password (requires OpenSSL installed)
SALT="$(create_passwd 16)"
password="$(create_passwd 16)"
PASSWORD_SHA1="$(echo -n "${password}${SALT}" | openssl dgst -sha1 | awk '{print $NF}')"

# Set working dir for OOD (used by launch scripts like kde.sh)
export OOD_DIR="${PWD}"

# Clean problematic env vars
unset DBUS_SESSION_BUS_ADDRESS
unset DBUS_SESSION_BUS_PID
unset XDG_SESSION_TYPE
unset WAYLAND_DISPLAY

# Set fallback XDG_RUNTIME_DIR
export XDG_RUNTIME_DIR="/tmp/xdg-runtime-$USER_UID"
mkdir -p "$XDG_RUNTIME_DIR"
chmod 700 "$XDG_RUNTIME_DIR"
echo "[before.sh.erb] XDG_RUNTIME_DIR set to $XDG_RUNTIME_DIR"

# Unset bash-exported functions (KDE dislikes these)
unset $(env | grep -o '^BASH_FUNC_.*%%' | cut -d= -f1)

# GPU detection
VGL_LIB_PATH="/usr/lib"
GPU_PRESENT=$(nvidia-smi --query-gpu=name --format=csv,noheader,nounits 2>/dev/null | grep -v "^$" | head -n 1)

if [[ -n "$GPU_PRESENT" && "$GPU_PRESENT" != "No devices were found" && -f "${VGL_LIB_PATH}/libdlfaker.so" && -f "${VGL_LIB_PATH}/libvglfaker.so" ]]; then
  export OOD_GPU_AVAILABLE=true
  export VGL_DISPLAY=egl
  export LD_PRELOAD="${VGL_LIB_PATH}/libdlfaker.so:${VGL_LIB_PATH}/libvglfaker.so"
  echo "[before.sh.erb] GPU detected: $GPU_PRESENT"
  echo "[before.sh.erb] VirtualGL enabled"
else
  export OOD_GPU_AVAILABLE=false
  export LIBGL_ALWAYS_SOFTWARE=1
  export QT_QUICK_BACKEND=software
  echo "[before.sh.erb] No GPU or VirtualGL missing â€” using software rendering"
fi

# Notebook root directory
export NOTEBOOK_ROOT="${NOTEBOOK_ROOT:-${HOME}}"

# The `$CONFIG_FILE` environment variable is exported as it is used in the main
# `script.sh.erb` file when launching the Jupyter Notebook server.
export CONFIG_FILE="${PWD}/config.py"

# Generate Jupyter configuration file with secure file permissions
(
umask 077
cat > "${CONFIG_FILE}" << EOL
c.JupyterApp.config_file_name = 'ondemand_config'
c.NotebookApp.ip = '*'
c.NotebookApp.port = ${port}
c.NotebookApp.port_retries = 0
c.NotebookApp.password = u'sha1:${SALT}:${PASSWORD_SHA1}'
c.NotebookApp.base_url = '/node/${host}/${port}/'
c.NotebookApp.open_browser = False
c.NotebookApp.allow_origin = '*'
c.NotebookApp.notebook_dir = '${HOME}'
c.NotebookApp.disable_check_xsrf = True
EOL
)

echo "[before.sh.erb] Setup complete."
